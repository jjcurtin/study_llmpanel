---
title: "Qualtrics LLM Panel Preregistration"
author: "Colin Maggard and Claire Punturieri"
date: "`r lubridate::today()`"
output: 
  html_document:
    toc: true 
    toc_depth: 4
format:
  html:
    embed-resources: true
editor_options: 
  chunk_output_type: console
---

# To do

Claire:
 - Write out models
 - Email Markus to ask about model/set up meeting --> will email Ben, Markus OOO

Colin:
  - Generating the data
  - Start outlining the study overview section

```{r}
library(stats)
library(lme4)
library(tidyverse) 
library(psych) 
library(car)
library(broom)
```

# Study Overview

## Specific Aims

## Data

# Purpose of Preregistration

## Outcomes

## Focal and Secondary Effects

# Data Generation

```{r}
# qualtrics data comes out as:
# Q1,Q2,Q3,Q4,Q5_6,Q6,Q7,Q8,Q9,Q10,           demographics
# Q1_1,Q2_1,Q3_1,Q4_1,Q5_1.1,Q6_1,Q7_1,Q8_1,  tone categories
# _1,_1.1,_1.2,_1.3,_1.4,_1.5,_1.6,_1.7,_1.8,_1.9,_1.10,_1.11,_1.12,_1.13,_1.14,_1.15,_1.16,_1.17,_1.18,_1.19,_1.20,_1.21,_1.22,_1.23,_1.24,_1.25,_1.26,_1.27,_1.28,_1.29,_1.30,_1.31,_1.32,_1.33,_1.34,_1.35,_1.36,_1.37,_1.38,_1.39,_1.40,_1.41,_1.42,_1.43,_1.44,_1.45,_1.46,_1.47
set.seed(1)
n_participants <- 100
standard_deviation <- 0.3

tones <- c("legitimizing", "caring_supportive", "self_efficacy",
           "acknowledging", "value_affirmation", "norms")
styles <- c("formal", "informal")
contexts <- c(
  "high_increasing", "high_decreasing",
  "low_increasing", "low_decreasing"
)

# ================ Preferences Setup ================
tone_means <- c(
  legitimizing      = 1,
  caring_supportive = 2,
  self_efficacy     = 3,
  acknowledging     = 4,
  value_affirmation = 5,
  norms             = 6
)
tone_sex_adj <- list(
  male = c(
    legitimizing = -0.3,
    norms        =  0.8
  ),
  female = c(
    legitimizing =  0.8,
    norms        = -0.3
  )
)
get_adjusted_tone_mean <- function(tone, sex) {
  base_mean <- tone_means[tone]
  adj <- 0
  if (!is.null(tone_sex_adj[[sex]])) {
    adj <- tone_sex_adj[[sex]][tone]
    if (is.na(adj)) adj <- 0
  }
  return(base_mean + adj)
}

style_means <- c(
  formal            = 3,
  informal          = 5
)
style_sex_adj <- list(
  male = c(
    formal       = -0.3,
    informal     =  0.8
  ),
  female = c(
    formal       = 0.8,
    informal     =  -0.3
  )
)
get_adjusted_style_mean <- function(style, sex) {
  base_mean <- style_means[style]
  adj <- 0
  if (!is.null(style_sex_adj[[sex]])) {
    adj <- style_sex_adj[[sex]][style]
    if (is.na(adj)) adj <- 0
  }
  return(base_mean + adj)
}
# ================ Preferences Setup ================


# ================ Participant Generation ================
n <- n_participants
repeat_even <- function(x, total) {
    rep(x, length.out = total)
}
participant_id <- 1:n
age               <- sample(repeat_even(18:65, n))
sex               <- sample(repeat_even(c("male", "female"), n))
gender_id         <- sample(repeat_even(c("man", "woman", "nonbinary"), n))
sexual_orientation<- sample(repeat_even(c("heterosexual", "gay/lesbian", "bisexual", "other"), n))
race_ethn         <- sample(repeat_even(c("white", "black", "asian", "hispanic", "other"), n))
education         <- sample(repeat_even(c("high_school", "bachelor", "master", "phd"), n))
income            <- sample(repeat_even(seq(20000, 100000, by = 20000), n))
marital_status    <- sample(repeat_even(c("single", "married", "divorced", "widowed"), n))
no_in_household   <- sample(repeat_even(1:6, n))
minoritized       <- sample(repeat_even(c("yes", "no"), n))
income_adj <- as.integer(income / no_in_household)
participants <- data.frame(
    participant_id,
    age,
    sex,
    gender_id,
    sexual_orientation,
    race_ethn,
    education,
    income,
    marital_status,
    no_in_household,
    minoritized,
    income_adj
)
#write.csv(participants, file = 'participants.csv', row.names = FALSE)
# ================ Participant Generation ================


# ================ Tone Preference Generation ================
participant_id <- rep(participants$participant_id, each = length(tones))
participant_sex <- rep(participants$sex, each = length(tones))
tone <- rep(tones, times = nrow(participants))

adjusted_means <- mapply(get_adjusted_tone_mean, tone, participant_sex)

tone_rating <- rnorm(length(tone), mean = adjusted_means, sd = standard_deviation)
tone_rating <- pmin(pmax(tone_rating, 1), 7)
tone_rating <- round(tone_rating)
tone_preferences <- data.frame(
  participant_id = participant_id,
  tone = tone,
  tone_rating = tone_rating
)
#tone_preferences <- merge(tone_preferences, participants, by = "participant_id", all.x = TRUE)
#write.csv(tone_preferences, file = 'tone/tone_preferences.csv', row.names = FALSE)
# ================ Tone Preference Generation ================


# ================ Style Preference Generation ================
participant_id <- rep(participants$participant_id, each = length(styles))
participant_sex <- rep(participants$sex, each = length(styles))
style <- rep(styles, times = nrow(participants))

adjusted_means <- mapply(get_adjusted_style_mean, style, participant_sex)

style_rating <- rnorm(length(style), mean = adjusted_means, sd = standard_deviation)
style_rating <- pmin(pmax(style_rating, 1), 7)
style_rating <- round(style_rating)
style_preferences <- data.frame(
  participant_id = participant_id,
  style = style,
  style_rating = style_rating
)
#style_preferences <- merge(style_preferences, participants, by = "participant_id", all.x = TRUE)
#write.csv(style_preferences, file = 'style/style_preferences.csv', row.names = FALSE)
# ================ Style Preference Generation ================




# # ================ Message Preference Generation for tonesxstylexcontext ================

participant_id <- rep(participants$participant_id, each = length(tones))
participant_sex <- rep(participants$sex, each = length(tones))
tone <- rep(rep(tones, each = length(styles) * length(contexts)), times = nrow(participants))
style <- rep(rep(styles, each = length(contexts)), times = length(tones) * nrow(participants))

adjusted_tone_means <- mapply(get_adjusted_tone_mean, tone, participant_sex)
adjusted_style_means <- mapply(get_adjusted_style_mean, style, participant_sex)

message_rating_tone <- rnorm(length(tone), mean = adjusted_tone_means, sd = standard_deviation)
message_rating_style <- rnorm(length(style), mean = adjusted_style_means, sd = standard_deviation)
message_rating <- (message_rating_tone + message_rating_style) / 2

message_rating <- pmin(pmax(message_rating, 1), 7)
message_rating <- round(message_rating)
message_preferences <- data.frame(
  participant_id = participant_id,
  tone = tone,
  style = style,
  message_rating = message_rating
)
#message_preferences <- merge(message_preferences, participants, by = "participant_id", all.x = TRUE)
#write.csv(message_preferences, file = 'messages/message_preferences.csv', row.names = FALSE)
# # ================ Message Preference Generation for tonesxstylexcontext ================
```

Combine message, style, and tone preferences into one dataset:
```{r}
# for this to work, don't run the merging you did above
# I commented your merges and write functions out for now so you can run it in one go

combined <- participants |>
  left_join(message_preferences, by = "participant_id") |> 
  left_join(style_preferences, by = c("participant_id", "style")) |> 
  left_join(tone_preferences, by = c("participant_id", "tone"))

```

Simulated data should have:

 1. We should see clear differences in actual ratings of messages. Within each tone/style, people's ratings should be pretty similar to one another (low variance) but between tone/style ratings should be noticeably different (high variance).
 
 Example: people might rate the norms tone at around a 6/7 but the self-efficacy tone at around a 3/7.

 2. Stated preferences should match actual ratings.
 
 Example: if someone says they like "informal" messages, then their ratings of actual "informal" messages should be high, too.

 3. We want to observe a demographic difference. Create a sex variable (male/female) where there is a clear difference in tone/style preferences.
 
 Example: prefer "norms" messages and women prefer "legitimizing" messages.

 4. We want tone and style to interact.
 
 Example: all tones that are crossed with the "informal" style to have higher actual ratings than all tones crossed with the "formal" style.

Some other notes for making it realistic!

 - Make sure there's a little bit of randomness (we don't want two given person's ratings to be identical, but we still want the patterns above to be obvious)
 - Make sure that not every person's stated preference perfectly matches their actual message ratings
 - Keep ratings in the real range of values we'll be collecting (e.g., 1-7 Likert scale)

# Preregistered Analyses

Variables:
 - participant_id
 - style_rating (how much would you like to receive a message in this style)
 - tone_rating (how much would you like to receive a message in this tone)
 - message_rating (how helpful do you find this message)
 - style (informal, formal)
 - tone (value affirmation, norms, acknowledging, self-efficacy, caring/supportive, legitimizing)
 - context (high/increasing, low/increasing, high/decreasing, low/decreasing)
 - age
 - sex
 - gender_id
 - sexual_orientation
 - race_ethn
 - education
 - income
 - marital_status
 - no_in_household
 - minoritized
 - income_adj (will be calculated as: income / no_in_household)
 
## Models 1 & 2 - Style and tone stated preferences

Answers:

 - Do people have message tone and/or style preferences? (stated preferences from categories)
 - Are there demographic differences in these preferences? (demonstrated here using sex variable)
 
By testing:

 - The main effects of style and tone separately
 - The main effect of sex
 - The interaction between sex and style/tone

For style:
```{r}
m1 <- lm(style_rating ~ style*sex, data = style_preferences)
broom::tidy(m1)
```

For tone:
```{r}
m2 <- lm(tone_rating ~ tone*sex, data = tone_preferences)
broom::tidy(m2)
```

## Model 3 - Style and tone actual ratings

Answers:

 - Do people have actual message tone and/or style differences?
 - Is there an interaction between tone and style?
 - Are there demographic differences in actual message ratings?
 
By testing:

 - The main effects of style and tone condition on actual ratings
 - The interactive effect of style and tone
 - The main effect of sex on actual ratings
 - While accounting for individual differences by including random intercepts for participants and messages
 - While modeling individual variability in effects of style and tone with random slopes by participant
 
> This would be the model where we could incorporate context if we are able to do the necessary randomization for that. Then I think we'd need random slope for context within participant.

```{r}
m3 <- lmer(actual_rating ~ style*tone + sex +
             (1 + style*tone | participant) + (1 | message),
           data = d)
```

Note to Claire to add in model simplification steps that will be carried out should model not converge.

## Model 4 - Concordance between preferences and actual ratings

Answers:

 - Do message tone and style preferences correspond to actual ratings?
 
By testing:

 - Main effects of style and tone preferences on actual ratings
 - While accounting for individual differences by including random intercepts for participants and messages
 - While modeling individual variability in effects of style and tone with random slopes by participant


```{r}
m4 <- lmer(actual_rating ~ pref_rating_tone + pref_rating_style +
             (1 + pref_rating_tone + pref_rating_style | participant) + (1 | message),
           data = d)
```

> Do we want demographic characteristics in here? Unsure. Also think about if pref_rating_tone and pref_rating_style should be an interaction. This might also be a good place to try out Spearman's ranked correlations.

## Models 5, 6, 7, & 8 - Within and between comparisons (ICC)

Answers:

 - Are participant ratings of their preferences more different across tone/style categories than within tone/style categories?
 - Are participant ratings of messages more different across tone/style categories than within tone/style categories?
 
> note that not everyone is exposed to every message

For tone/style preferences:
```{r}
tone_preferences |>
  select(participant_id, tone, tone_rating) |>
  pivot_wider(names_from = participant_id, values_from = tone_rating) |>
  select(-tone) |> 
  ICC()

style_preferences |>
  select(participant_id, style, style_rating) |>
  pivot_wider(names_from = participant_id, values_from = style_rating) |>
  select(-style) |> 
  ICC()
```

For tone/style actual ratings:
```{r}
message_preferences |> 
  group_by(participant_id, tone) |>
  # here I am summarizing across four contexts
  summarise(mean_rating = mean(message_rating, na.rm = TRUE),
            .groups = "drop") |> 
  pivot_wider(names_from = participant_id, values_from = mean_rating) |>
  select(-tone) |> 
  ICC()

message_preferences |> 
  group_by(participant_id, style) |> 
  summarise(mean_rating = mean(message_rating, na.rm = TRUE),
            .groups = "drop") |> 
  pivot_wider(names_from = participant_id, values_from = mean_rating) |>
  select(-style) |> 
  ICC()
```

> ICC does not work with ranked ordered categories, but there is a rank ICC package we could consider using: https://pmc.ncbi.nlm.nih.gov/articles/PMC10592008/ https://github.com/shengxintu/rankICC This paper has only been cited 10 times so might not be the best option.

 
# Notes

 - Are pref_rating_style/tone and actual_rating comparable? Should pref be "helpful" instead of like?
 - Should pref_rating be one variable or separated into two?
 - Are we going to use context?
 - Note that gender_id is fill in the blank so probably can't use in analyses. Should this be specific categories?
 - Treat race/ethnicity as separate variables?

 